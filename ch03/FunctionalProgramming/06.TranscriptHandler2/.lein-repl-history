(defn sentence-split [text]
  (map trim (re-seq #"[^\.!\?:;]+[\.!\?:;]*" text)))
(sentence-split "This is a sentence. Is this?! A fragment")
(defn sentence-split [text]
  (map trim (re-seq #"[^\.!\?:;]+[\.!\?:;]*" text)))
(trim " 123 ")
(use 'clojure.string)
(trim " xx")
(defn sentence-split [text]
  (map trim (re-seq #"[^\.!\?:;]+[\.!\?:;]*" text)))
(sentence-split "This is a sentence. Is this?! A fragment")
(defn is-sentence? [text]
  (re-matches #"^.*[\.!\?:;]$" text))
(is-sentence? "This is a sentence.")
(is-sentence? "A sentence doesn't end with a comma,")
(defn sentence-join [x y]
  (if (is-sentence? x) y (str x " " y)))
(defn string->sentences [strings]
  (filter is-sentence?
          (reductions sentence-join
                      (mapcat sentence-split strings))))
(defn strings->sentences [strings]
  (filter is-sentence?
          (reductions sentence-join
                      (mapcat sentence-split strings))))
(reduce + [1 2 3 4])
(reductions + [1 2 3 4])
(sentence-join "A complete sentence." "Start of another")
(sentence-join "This is" "a sentence.")
(def fragments ["A" "sentence." "And another." "Last" "sentence."])
(reductions sentence-join fragments)
(filter is-sentence? (reductions sentence-join fragments))
(def translator "http://localhost:3001/translate")
(defn translate [text]
  (future
    (:body (client/post translator {:body text}))))
(def translations
  (delay
   (map translate (strings->sentences (map deref snippets)))))
(def snippets (repeatedly promise))
(def translator "http://localhost:3001/translate")
(defn translate [text]
  (future
    (:body (client/post translator {:body text}))))
(def translations
  (delay
   (map translate (strings->sentences (map deref snippets)))))
(defn accept-snippet [n text]
  (deliver (nth snippets n) text))
(defn get-translation [n]
  @(nth @translations n))
(defroutes app-routes
  (PUT "/snippet/:n" [n :as {:keys [body]}]
       (accept-snippet (edn/read-string n) (slurp body))
       (response "OK"))
  (GET "/translation/:n" [n]
       (response (get-translation (den/read-string n)))))
(defroutes app-routes
  (PUT "/snippet/:n" [n :as {:keys [body]}]
       (accept-snippet (edn/read-string n) (slurp body))
       (response "OK"))
  (GET "/translation/:n" [n]
       (response (get-translation (edn/read-string n)))))
(defn -main [& args]
  (run-jetty (wrap-charset (api app-routes)) {:port 3000}))
(-main)
